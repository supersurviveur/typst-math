//! Contains every symbol lists used in the project.
//! Stealed from https://github.com/typst/typst/blob/main/crates/typst/src/symbols/symbol.rs
//! and edited to be used in the frontend.

use phf::phf_map;
use std::fmt::Debug;
use typst_math_macros::symbols;
use wasm_bindgen::prelude::*;

/// Represents a symbol with a given category.
#[derive(Debug, Clone)]
#[cfg_attr(not(feature = "coverage"), wasm_bindgen(getter_with_clone))]
pub struct Symbol {
    pub symbol: char,
    pub category: Category,
}

/// Represents a symbol category, used for styling.

#[derive(Debug, Clone, Copy, PartialEq)]
#[cfg_attr(not(feature = "coverage"), wasm_bindgen)]
pub enum Category {
    Keyword,
    Comparison,
    Operator,
    Number,
    Letter,
    BigLetter,
    Set,
    Space,
    Default,
}

pub fn get_category_by_name(name: &String) -> Category {
    return match name.to_lowercase().as_str() {
        "keyword" => Category::Keyword,
        "comparison" => Category::Comparison,
        "operator" => Category::Operator,
        "number" => Category::Number,
        "letter" => Category::Letter,
        "bigletter" => Category::BigLetter,
        "set" => Category::Set,
        "space" => Category::Space,
        _ => Category::Default,
    };
}

/// Represents a symbol color, passed to the frontend for styling.
#[derive(Debug, Clone, Copy, PartialEq)]
#[cfg_attr(not(feature = "coverage"), wasm_bindgen)]
pub enum Color {
    Keyword,
    Comparison,
    Operator,
    Letter,
    Set,
    Number,
    String,
}

/// The list of general symbols.
pub const SYMBOLS: phf::Map<&str, Symbol> = symbols! {
    // Control.
    wj: '\u{2060}'; Space,
    zwj: '\u{200D}'; Space,
    zwnj: '\u{200C}'; Space,
    zws: '\u{200B}'; Space,
    lrm: '\u{200E}'; Space,
    rlm: '\u{200F}'; Space,

    // Spaces.
    space: [
        ' ',
        nobreak: '\u{A0}',
        nobreak.narrow: '\u{202F}',
        en: '\u{2002}',
        quad: '\u{2003}',
        third: '\u{2004}',
        quarter: '\u{2005}',
        sixth: '\u{2006}',
        med: '\u{205F}',
        fig: '\u{2007}',
        punct: '\u{2008}',
        thin: '\u{2009}',
        hair: '\u{200A}',
    ]; Space,

    // Delimiters.
    paren: [l: '(', r: ')', t: '⏜', b: '⏝']; Set,
    brace: [l: '{', r: '}', t: '⏞', b: '⏟']; Set,
    bracket: [l: '[', l.double: '⟦', r: ']', r.double: '⟧', t: '⎴', b: '⎵']; Set,
    shell: [l: '〔', r: '〕', t: '⏠', b: '⏡']; Set,
    bar: [v: '|', v.double: '‖', v.triple: '⦀', v.broken: '¦', v.circle: '⦶', h: '―']; Operator,
    fence: [l: '⧘', l.double: '⧚', r: '⧙', r.double: '⧛', dotted: '⦙']; Comparison,
    angle: [
        '∠',
        l: '⟨',
        r: '⟩',
        l.double: '《',
        r.double: '》',
        acute: '⦟',
        arc: '∡',
        arc.rev: '⦛',
        rev: '⦣',
        right: '∟',
        right.rev: '⯾',
        right.arc: '⊾',
        right.dot: '⦝',
        right.sq: '⦜',
        spatial: '⟀',
        spheric: '∢',
        spheric.rev: '⦠',
        spheric.top: '⦡',
    ]; Operator,

    // Punctuation.
    amp: ['&', inv: '⅋']; Default,
    ast: [
        op: '∗',
        basic: '*',
        low: '⁎',
        double: '⁑',
        triple: '⁂',
        small: '﹡',
        circle: '⊛',
        square: '⧆',
    ]; Operator,
    at: '@'; Operator,
    backslash: ['\\', circle: '⦸', not: '⧷']; Comparison,
    co: '℅'; Default,
    colon: [':', double: '∷', eq: '≔', double.eq: '⩴']; Comparison,
    comma: ','; Default,
    dagger: ['†', double: '‡']; Default,
    dash: [
        en: '–',
        em: '—',
        fig: '‒',
        wave: '〜',
        colon: '∹',
        circle: '⊝',
        wave.double: '〰',
    ]; Operator,
    dot: [
        op: '⋅',
        basic: '.',
        c: '·',
        circle: '⊙',
        circle.big: '⨀',
        square: '⊡',
        double: '¨',
        triple: '\u{20db}',
        quad: '\u{20dc}',
    ]; Operator,
    excl: ['!', double: '‼', inv: '¡', quest: '⁉']; Default,
    quest: ['?', double: '⁇', excl: '⁈', inv: '¿']; Default,
    interrobang: '‽'; Default,
    hash: '#'; Default,
    hyph: ['‐', minus: '\u{2D}', nobreak: '\u{2011}', point: '‧', soft: '\u{ad}']; Space,
    percent: '%'; Default,
    copyright: ['©', sound: '℗']; Default,
    permille: '‰'; Default,
    pilcrow: ['¶', rev: '⁋']; Default,
    section: '§'; Default,
    semi: [';', rev: '⁏']; Default,
    slash: ['/', double: '⫽', triple: '⫻', big: '\u{29f8}']; Comparison,
    dots: [h.c: '⋯', h: '…', v: '⋮', down: '⋱', up: '⋰']; Comparison,
    tilde: [
        op: '∼',
        basic: '~',
        dot: '⩪',
        eq: '≃',
        eq.not: '≄',
        eq.rev: '⋍',
        equiv: '≅',
        equiv.not: '≇',
        nequiv: '≆',
        not: '≁',
        rev: '∽',
        rev.equiv: '≌',
        triple: '≋',
    ]; Comparison,

    // Accents, quotes, and primes.
    acute: ['´', double: '˝']; Default,
    breve: '˘'; Default,
    caret: '‸'; Default,
    caron: 'ˇ'; Default,
    hat: '^'; Default,
    diaer: '¨'; Default,
    grave: '`'; Default,
    macron: '¯'; Default,
    quote: [
        double: '"',
        single: '\'',
        l.double: '“',
        l.single: '‘',
        r.double: '”',
        r.single: '’',
        angle.l.double: '«',
        angle.l.single: '‹',
        angle.r.double: '»',
        angle.r.single: '›',
        high.double: '‟',
        high.single: '‛',
        low.double: '„',
        low.single: '‚',
    ]; Default,
    prime: [
        '′',
        rev: '‵',
        double: '″',
        double.rev: '‶',
        triple: '‴',
        triple.rev: '‷',
        quad: '⁗',
    ]; Default,

    // https://en.wikipedia.org/wiki/List_of_mathematical_symbols_by_subject
    // Arithmetic.
    plus: [
        '+',
        circle: '⊕',
        circle.arrow: '⟴',
        circle.big: '⨁',
        dot: '∔',
        minus: '±',
        small: '﹢',
        square: '⊞',
        triangle: '⨹',
    ]; Operator,
    minus: [
        '−',
        circle: '⊖',
        dot: '∸',
        plus: '∓',
        square: '⊟',
        tilde: '≂',
        triangle: '⨺',
    ]; Operator,
    div: ['÷', circle: '⨸']; Operator,
    times: [
        '×',
        big: '⨉',
        circle: '⊗',
        circle.big: '⨂',
        div: '⋇',
        three.l: '⋋',
        three.r: '⋌',
        l: '⋉',
        r: '⋊',
        square: '⊠',
        triangle: '⨻',
    ]; Operator,
    ratio: '∶'; Operator,

    // Relations.
    eq: [
        '=',
        star: '≛',
        circle: '⊜',
        colon: '≕',
        def: '≝',
        delta: '≜',
        equi: '≚',
        est: '≙',
        gt: '⋝',
        lt: '⋜',
        m: '≞',
        not: '≠',
        prec: '⋞',
        quest: '≟',
        small: '﹦',
        succ: '⋟',
        triple: '≡',
        quad: '≣',
    ]; Comparison,
    gt: [
        '>',
        circle: '⧁',
        curly: '≻',
        curly.approx: '⪸',
        curly.double: '⪼',
        curly.eq: '≽',
        curly.eq.not: '⋡',
        curly.equiv: '⪴',
        curly.napprox: '⪺',
        curly.nequiv: '⪶',
        curly.not: '⊁',
        curly.ntilde: '⋩',
        curly.tilde: '≿',
        dot: '⋗',
        approx: '⪆',
        double: '≫',
        eq: '≥',
        eq.slant: '⩾',
        eq.lt: '⋛',
        eq.not: '≱',
        equiv: '≧',
        lt: '≷',
        lt.not: '≹',
        napprox: '⪊',
        nequiv: '≩',
        not: '≯',
        ntilde: '⋧',
        small: '﹥',
        tilde: '≳',
        tilde.not: '≵',
        tri: '⊳',
        tri.eq: '⊵',
        tri.eq.not: '⋭',
        tri.not: '⋫',
        triple: '⋙',
        triple.nested: '⫸',
    ]; Comparison,
    lt: [
        '<',
        circle: '⧀',
        curly: '≺',
        curly.approx: '⪷',
        curly.double: '⪻',
        curly.eq: '≼',
        curly.eq.not: '⋠',
        curly.equiv: '⪳',
        curly.napprox: '⪹',
        curly.nequiv: '⪵',
        curly.not: '⊀',
        curly.ntilde: '⋨',
        curly.tilde: '≾',
        dot: '⋖',
        approx: '⪅',
        double: '≪',
        eq: '≤',
        eq.slant: '⩽' ,
        eq.gt: '⋚',
        eq.not: '≰',
        equiv: '≦',
        gt: '≶',
        gt.not: '≸',
        napprox: '⪉',
        nequiv: '≨',
        not: '≮',
        ntilde: '⋦',
        small: '﹤',
        tilde: '≲',
        tilde.not: '≴',
        tri: '⊲',
        tri.eq: '⊴',
        tri.eq.not: '⋬',
        tri.not: '⋪',
        triple: '⋘',
        triple.nested: '⫷',
    ]; Comparison,
    approx: ['≈', eq: '≊', not: '≉']; Comparison,
    prec: [
        '≺',
        approx: '⪷',
        double: '⪻',
        eq: '≼',
        eq.not: '⋠',
        equiv: '⪳',
        napprox: '⪹',
        nequiv: '⪵',
        not: '⊀',
        ntilde: '⋨',
        tilde: '≾',
    ]; Comparison,
    succ: [
        '≻',
        approx: '⪸',
        double: '⪼',
        eq: '≽',
        eq.not: '⋡',
        equiv: '⪴',
        napprox: '⪺',
        nequiv: '⪶',
        not: '⊁',
        ntilde: '⋩',
        tilde: '≿',
    ]; Comparison,
    equiv: ['≡', not: '≢']; Comparison,
    prop: '∝'; Default,
    original: '⊶'; Default,
    image: '⊷'; Default,

    // Set theory.
    emptyset: ['∅', rev: '⦰']; Set,
    nothing: ['∅', rev: '⦰']; Set,
    without: '∖'; Set,
    complement: '∁'; Keyword,
    in: [
        '∈',
        not: '∉',
        rev: '∋',
        rev.not: '∌',
        rev.small: '∍',
        small: '∊',
    ]; Keyword,
    subset: [
        '⊂',
        dot: '⪽',
        double: '⋐',
        eq: '⊆',
        eq.not: '⊈',
        eq.sq: '⊑',
        eq.sq.not: '⋢',
        neq: '⊊',
        not: '⊄',
        sq: '⊏',
        sq.neq: '⋤',
    ]; Keyword,
    supset: [
        '⊃',
        dot: '⪾',
        double: '⋑',
        eq: '⊇',
        eq.not: '⊉',
        eq.sq: '⊒',
        eq.sq.not: '⋣',
        neq: '⊋',
        not: '⊅',
        sq: '⊐',
        sq.neq: '⋥',
    ]; Keyword,
    union: [
        '∪',
        arrow: '⊌',
        big: '⋃',
        dot: '⊍',
        dot.big: '⨃',
        double: '⋓',
        minus: '⩁',
        or: '⩅',
        plus: '⊎',
        plus.big: '⨄',
        sq: '⊔',
        sq.big: '⨆',
        sq.double: '⩏',
    ]; Keyword,
    sect: [
        '∩',
        and: '⩄',
        big: '⋂',
        dot: '⩀',
        double: '⋒',
        sq: '⊓',
        sq.big: '⨅',
        sq.double: '⩎',
    ]; Keyword,
    inter: [
        '∩',
        and: '⩄',
        big: '⋂',
        dot: '⩀',
        double: '⋒',
        sq: '⊓',
        sq.big: '⨅',
        sq.double: '⩎',
    ]; Keyword,

    // Calculus.
    infinity: '∞'; Default,
    oo: '∞'; Default,
    dif: 'd'; Default, // Added manually, not from official typst repo
    diff: '∂'; Default, // Deprecation planned
    partial: '∂'; Default,
    gradient: '∇'; Default,
    nabla: '∇'; Default,
    sum: ['∑', integral: '⨋']; BigLetter,
    product: ['∏', co: '∐']; BigLetter,
    integral: [
        '∫',
        arrow.hook: '⨗',
        ccw: '⨑',
        cont: '∮',
        cont.ccw: '∳',
        cont.cw: '∲',
        cw: '∱',
        dash: '⨍',
        dash.double: '⨎',
        double: '∬',
        quad: '⨌',
        sect: '⨙',
        slash: '⨏',
        square: '⨖',
        surf: '∯',
        times: '⨘',
        triple: '∭',
        union: '⨚',
        vol: '∰',
    ]; BigLetter,
    laplace: '∆'; BigLetter,

    // Logic.
    forall: '∀'; Keyword,
    exists: ['∃', not: '∄']; Keyword,
    top: '⊤'; Keyword,
    bot: '⊥'; Keyword,
    not: '¬'; Operator,
    and: ['∧', big: '⋀', curly: '⋏', dot: '⟑', double: '⩓']; Operator,
    or: ['∨', big: '⋁', curly: '⋎', dot: '⟇', double: '⩔']; Operator,
    xor: ['⊕', big: '⨁']; Operator,
    models: '⊧'; Comparison,
    forces: ['⊩', not: '⊮']; Comparison,
    therefore: '∴'; Operator,
    because: '∵'; Operator,
    qed: '∎'; Default,

    // Function and category theory.
    compose: '∘'; Operator,
    convolve: '∗'; Operator,
    multimap: '⊸'; Operator,

    // Number theory.
    divides: ['∣', not: '∤']; Comparison,

    // Algebra.
    wreath: '≀'; Comparison,

    // Geometry.
    parallel: ['∥', circle: '⦷', not: '∦']; Comparison,
    perp: ['⟂', circle: '⦹']; Comparison,

    // Miscellaneous Technical.
    diameter: '⌀'; Default,
    join: ['⨝', r: '⟖', l: '⟕', l.r: '⟗']; Default,
    degree: ['°', c: '℃', f: '℉']; Default,
    smash: '⨳'; Default,

    // Currency.
    bitcoin: '₿'; Default,
    dollar: '$'; Default,
    euro: '€'; Default,
    franc: '₣'; Default,
    lira: '₺'; Default,
    peso: '₱'; Default,
    pound: '£'; Default,
    ruble: '₽'; Default,
    rupee: '₹'; Default,
    won: '₩'; Default,
    yen: '¥'; Default,

    // Miscellaneous.
    ballot: ['☐', x: '☒']; Default,
    checkmark: ['✓', light: '🗸']; Default,
    floral: ['❦', l: '☙', r: '❧']; Default,
    notes: [up: '🎜', down: '🎝']; Default,
    refmark: '※'; Default,
    servicemark: '℠'; Default,
    maltese: '✠'; Default,
    suit: [
        club.filled: '♣',
        club.stroked: '♧',
        diamond.filled: '♦',
        diamond.stroked: '♢',
        heart.filled: '♥',
        heart.stroked: '♡',
        spade.filled: '♠',
        spade.stroked: '♤',
    ]; Default,

    // Shapes.
    bullet: '•'; Default,
    circle: [
        stroked: '○',
        stroked.tiny: '∘',
        stroked.small: '⚬',
        stroked.big: '◯',
        filled: '●',
        filled.tiny: '⦁',
        filled.small: '∙',
        filled.big: '⬤',
        dotted: '◌',
        nested: '⊚',
    ]; Default,
    ellipse: [
        stroked.h: '⬭',
        stroked.v: '⬯',
        filled.h: '⬬',
        filled.v: '⬮',
    ]; Default,
    triangle: [
        stroked.t: '△',
        stroked.b: '▽',
        stroked.r: '▷',
        stroked.l: '◁',
        stroked.bl: '◺',
        stroked.br: '◿',
        stroked.tl: '◸',
        stroked.tr: '◹',
        stroked.small.t: '▵',
        stroked.small.b: '▿',
        stroked.small.r: '▹',
        stroked.small.l: '◃',
        stroked.rounded: '🛆',
        stroked.nested: '⟁',
        stroked.dot: '◬',
        filled.t: '▲',
        filled.b: '▼',
        filled.r: '▶',
        filled.l: '◀',
        filled.bl: '◣',
        filled.br: '◢',
        filled.tl: '◤',
        filled.tr: '◥',
        filled.small.t: '▴',
        filled.small.b: '▾',
        filled.small.r: '▸',
        filled.small.l: '◂',
    ]; Default,
    square: [
        stroked: '□',
        stroked.tiny: '▫',
        stroked.small: '◽',
        stroked.medium: '◻',
        stroked.big: '⬜',
        stroked.dotted: '⬚',
        stroked.rounded: '▢',
        filled: '■',
        filled.tiny: '▪',
        filled.small: '◾',
        filled.medium: '◼',
        filled.big: '⬛',
    ]; Default,
    rect: [
        stroked.h: '▭',
        stroked.v: '▯',
        filled.h: '▬',
        filled.v: '▮',
    ]; Default,
    penta: [stroked: '⬠', filled: '⬟']; Default,
    hexa: [stroked: '⬡', filled: '⬢']; Default,
    diamond: [
        stroked: '◇',
        stroked.small: '⋄',
        stroked.medium: '⬦',
        stroked.dot: '⟐',
        filled: '◆',
        filled.medium: '⬥',
        filled.small: '⬩',
    ]; Default,
    lozenge: [
        stroked: '◊',
        stroked.small: '⬫',
        stroked.medium: '⬨',
        filled: '⧫',
        filled.small: '⬪',
        filled.medium: '⬧',
    ]; Default,
    parallelogram: [
        stroked: '▱',
        filled: '▰',
    ]; Default,
    star: [op: '⋆', stroked: '☆', filled: '★']; Operator,

    // Arrows, harpoons, and tacks.
    arrow: [
        r: '→',
        r.long.bar: '⟼',
        r.bar: '↦',
        r.curve: '⤷',
        r.dashed: '⇢',
        r.dotted: '⤑',
        r.double: '⇒',
        r.double.bar: '⤇',
        r.double.long: '⟹',
        r.double.long.bar: '⟾',
        r.double.not: '⇏',
        r.filled: '➡',
        r.hook: '↪',
        r.long: '⟶',
        r.long.squiggly: '⟿',
        r.loop: '↬',
        r.not: '↛',
        r.quad: '⭆',
        r.squiggly: '⇝',
        r.stop: '⇥',
        r.stroked: '⇨',
        r.tail: '↣',
        r.tilde: '⥲',
        r.triple: '⇛',
        r.twohead.bar: '⤅',
        r.twohead: '↠',
        r.wave: '↝',
        l: '←',
        l.bar: '↤',
        l.curve: '⤶',
        l.dashed: '⇠',
        l.dotted: '⬸',
        l.double: '⇐',
        l.double.bar: '⤆',
        l.double.long: '⟸',
        l.double.long.bar: '⟽',
        l.double.not: '⇍',
        l.filled: '⬅',
        l.hook: '↩',
        l.long: '⟵',
        l.long.bar: '⟻',
        l.long.squiggly: '⬳',
        l.loop: '↫',
        l.not: '↚',
        l.quad: '⭅',
        l.squiggly: '⇜',
        l.stop: '⇤',
        l.stroked: '⇦',
        l.tail: '↢',
        l.tilde: '⭉',
        l.triple: '⇚',
        l.twohead.bar: '⬶',
        l.twohead: '↞',
        l.wave: '↜',
        t: '↑',
        t.bar: '↥',
        t.curve: '⤴',
        t.dashed: '⇡',
        t.double: '⇑',
        t.filled: '⬆',
        t.quad: '⟰',
        t.stop: '⤒',
        t.stroked: '⇧',
        t.triple: '⤊',
        t.twohead: '↟',
        b: '↓',
        b.bar: '↧',
        b.curve: '⤵',
        b.dashed: '⇣',
        b.double: '⇓',
        b.filled: '⬇',
        b.quad: '⟱',
        b.stop: '⤓',
        b.stroked: '⇩',
        b.triple: '⤋',
        b.twohead: '↡',
        l.r: '↔',
        l.r.double: '⇔',
        l.r.double.long: '⟺',
        l.r.double.not: '⇎',
        l.r.filled: '⬌',
        l.r.long: '⟷',
        l.r.not: '↮',
        l.r.stroked: '⬄',
        l.r.wave: '↭',
        t.b: '↕',
        t.b.double: '⇕',
        t.b.filled: '⬍',
        t.b.stroked: '⇳',
        tr: '↗',
        tr.double: '⇗',
        tr.filled: '⬈',
        tr.hook: '⤤',
        tr.stroked: '⬀',
        br: '↘',
        br.double: '⇘',
        br.filled: '⬊',
        br.hook: '⤥',
        br.stroked: '⬂',
        tl: '↖',
        tl.double: '⇖',
        tl.filled: '⬉',
        tl.hook: '⤣',
        tl.stroked: '⬁',
        bl: '↙',
        bl.double: '⇙',
        bl.filled: '⬋',
        bl.hook: '⤦',
        bl.stroked: '⬃',
        tl.br: '⤡',
        tr.bl: '⤢',
        ccw: '↺',
        ccw.half: '↶',
        cw: '↻',
        cw.half: '↷',
        zigzag: '↯',
    ]; Comparison,
    arrows: [
        rr: '⇉',
        ll: '⇇',
        tt: '⇈',
        bb: '⇊',
        lr: '⇆',
        lr.stop: '↹',
        rl: '⇄',
        tb: '⇅',
        bt: '⇵',
        rrr: '⇶',
        lll: '⬱',
    ]; Comparison,
    arrowhead: [
        t: '⌃',
        b: '⌄',
    ]; Default,
    harpoon: [
        rt: '⇀',
        rt.bar: '⥛',
        rt.stop: '⥓',
        rb: '⇁',
        rb.bar: '⥟',
        rb.stop: '⥗',
        lt: '↼',
        lt.bar: '⥚',
        lt.stop: '⥒',
        lb: '↽',
        lb.bar: '⥞',
        lb.stop: '⥖',
        tl: '↿',
        tl.bar: '⥠',
        tl.stop: '⥘',
        tr: '↾',
        tr.bar: '⥜',
        tr.stop: '⥔',
        bl: '⇃',
        bl.bar: '⥡',
        bl.stop: '⥙',
        br: '⇂',
        br.bar: '⥝',
        br.stop: '⥕',
        lt.rt: '⥎',
        lb.rb: '⥐',
        lb.rt: '⥋',
        lt.rb: '⥊',
        tl.bl: '⥑',
        tr.br: '⥏',
        tl.br: '⥍',
        tr.bl: '⥌',
    ]; Comparison,
    harpoons: [
        rtrb: '⥤',
        blbr: '⥥',
        bltr: '⥯',
        lbrb: '⥧',
        ltlb: '⥢',
        ltrb: '⇋',
        ltrt: '⥦',
        rblb: '⥩',
        rtlb: '⇌',
        rtlt: '⥨',
        tlbr: '⥮',
        tltr: '⥣',
    ]; Comparison,
    tack: [
        r: '⊢',
        r.not: '⊬',
        r.long: '⟝',
        r.short: '⊦',
        r.double: '⊨',
        r.double.not: '⊭',
        l: '⊣',
        l.long: '⟞',
        l.short: '⫞',
        l.double: '⫤',
        t: '⊥',
        t.big: '⟘',
        t.double: '⫫',
        t.short: '⫠',
        b: '⊤',
        b.big: '⟙',
        b.double: '⫪',
        b.short: '⫟',
        l.r: '⟛',
    ]; Comparison,

    // Lowercase Greek.
    alpha: 'α'; Letter,
    beta: ['β', alt: 'ϐ']; Letter,
    chi: 'χ'; Letter,
    delta: 'δ'; Letter,
    epsilon: ['ε', alt: 'ϵ']; Letter,
    eta: 'η'; Letter,
    gamma: 'γ'; Letter,
    iota: 'ι'; Letter,
    kai: 'ϗ'; Letter,
    kappa: ['κ', alt: 'ϰ']; Letter,
    lambda: 'λ'; Letter,
    mu: 'μ'; Letter,
    nu: 'ν'; Letter,
    ohm: ['Ω', inv: '℧']; Letter,
    omega: 'ω'; Letter,
    omicron: 'ο'; Letter,
    phi: ['φ', alt: 'ϕ']; Letter,
    pi: ['π', alt: 'ϖ']; Letter,
    psi: 'ψ'; Letter,
    rho: ['ρ', alt: 'ϱ']; Letter,
    sigma: ['σ', alt: 'ς']; Letter,
    tau: 'τ'; Letter,
    theta: ['θ', alt: 'ϑ']; Letter,
    upsilon: 'υ'; Letter,
    xi: 'ξ'; Letter,
    zeta: 'ζ'; Letter,

    // Uppercase Greek.
    Alpha: 'Α'; Letter,
    Beta: 'Β'; Letter,
    Chi: 'Χ'; Letter,
    Delta: 'Δ'; Letter,
    Epsilon: 'Ε'; Letter,
    Eta: 'Η'; Letter,
    Gamma: 'Γ'; Letter,
    Iota: 'Ι'; Letter,
    Kai: 'Ϗ'; Letter,
    Kappa: 'Κ'; Letter,
    Lambda: 'Λ'; Letter,
    Mu: 'Μ'; Letter,
    Nu: 'Ν'; Letter,
    Omega: 'Ω'; Letter,
    Omicron: 'Ο'; Letter,
    Phi: 'Φ'; Letter,
    Pi: 'Π'; Letter,
    Psi: 'Ψ'; Letter,
    Rho: 'Ρ'; Letter,
    Sigma: 'Σ'; Letter,
    Tau: 'Τ'; Letter,
    Theta: 'Θ'; Letter,
    Upsilon: 'Υ'; Letter,
    Xi: 'Ξ'; Letter,
    Zeta: 'Ζ'; Letter,

    // Hebrew.
    aleph: 'א'; Letter,
    alef: 'א'; Letter,
    beth: 'ב'; Letter,
    bet: 'ב'; Letter,
    gimmel: 'ג'; Letter,
    gimel: 'ג'; Letter,
    daleth: 'ד'; Letter,
    dalet: 'ד'; Letter,
    shin: 'ש'; Letter,

    // Double-struck.
    AA: '𝔸'; Set,
    BB: '𝔹'; Set,
    CC: 'ℂ'; Set,
    DD: '𝔻'; Set,
    EE: '𝔼'; Set,
    FF: '𝔽'; Set,
    GG: '𝔾'; Set,
    HH: 'ℍ'; Set,
    II: '𝕀'; Set,
    JJ: '𝕁'; Set,
    KK: '𝕂'; Set,
    LL: '𝕃'; Set,
    MM: '𝕄'; Set,
    NN: 'ℕ'; Set,
    OO: '𝕆'; Set,
    PP: 'ℙ'; Set,
    QQ: 'ℚ'; Set,
    RR: 'ℝ'; Set,
    SS: '𝕊'; Set,
    TT: '𝕋'; Set,
    UU: '𝕌'; Set,
    VV: '𝕍'; Set,
    WW: '𝕎'; Set,
    XX: '𝕏'; Set,
    YY: '𝕐'; Set,
    ZZ: 'ℤ'; Set,

    // Miscellaneous letter-likes.
    ell: 'ℓ'; Letter,
    planck: ['ℎ', reduce: 'ℏ']; Letter,
    angstrom: 'Å'; Letter,
    kelvin: 'K'; Default,
    Re: 'ℜ'; Default,
    Im: 'ℑ'; Default,
    dotless: [i: '𝚤', j: '𝚥']; Letter,
};

/// The list of caligraphic letters.
pub const CAL_LETTERS: phf::Map<char, char> = phf_map! {
    'A' => '𝒜',
    'B' => 'ℬ',
    'C' => '𝒞',
    'D' => '𝒟',
    'E' => 'ℰ',
    'F' => 'ℱ',
    'G' => '𝒢',
    'H' => 'ℋ',
    'I' => 'ℐ',
    'J' => '𝒥',
    'K' => '𝒦',
    'L' => 'ℒ',
    'M' => 'ℳ',
    'N' => '𝒩',
    'O' => '𝒪',
    'P' => '𝒫',
    'Q' => '𝒬',
    'R' => 'ℛ',
    'S' => '𝒮',
    'T' => '𝒯',
    'U' => '𝒰',
    'V' => '𝒱',
    'W' => '𝒲',
    'X' => '𝒳',
    'Y' => '𝒴',
    'Z' => '𝒵',
    'a' => '𝒶',
    'b' => '𝒷',
    'c' => '𝒸',
    'd' => '𝒹',
    'e' => 'ℯ',
    'f' => '𝒻',
    'g' => 'ℊ',
    'h' => '𝒽',
    'i' => '𝒾',
    'j' => '𝒿',
    'k' => '𝓀',
    'l' => '𝓁',
    'm' => '𝓂',
    'n' => '𝓃',
    'o' => 'ℴ',
    'p' => '𝓅',
    'q' => '𝓆',
    'r' => '𝓇',
    's' => '𝓈',
    't' => '𝓉',
    'u' => '𝓊',
    'v' => '𝓋',
    'w' => '𝓌',
    'x' => '𝓍',
    'y' => '𝓎',
    'z' => '𝓏',
};

/// The list of fraktur letters.
pub const FRAK_LETTERS: phf::Map<char, char> = phf_map! {
    'A' => '𝔄',
    'B' => '𝔅',
    'C' => 'ℭ',
    'D' => '𝔇',
    'E' => '𝔈',
    'F' => '𝔉',
    'G' => '𝔊',
    'H' => 'ℌ',
    'I' => 'ℑ',
    'J' => '𝔍',
    'K' => '𝔎',
    'L' => '𝔏',
    'M' => '𝔐',
    'N' => '𝔑',
    'O' => '𝔒',
    'P' => '𝔓',
    'Q' => '𝔔',
    'R' => 'ℜ',
    'S' => '𝔖',
    'T' => '𝔗',
    'U' => '𝔘',
    'V' => '𝔙',
    'W' => '𝔚',
    'X' => '𝔛',
    'Y' => '𝔜',
    'Z' => 'ℨ',
    'a' => '𝔞',
    'b' => '𝔟',
    'c' => '𝔠',
    'd' => '𝔡',
    'e' => '𝔢',
    'f' => '𝔣',
    'g' => '𝔤',
    'h' => '𝔥',
    'i' => '𝔦',
    'j' => '𝔧',
    'k' => '𝔨',
    'l' => '𝔩',
    'm' => '𝔪',
    'n' => '𝔫',
    'o' => '𝔬',
    'p' => '𝔭',
    'q' => '𝔮',
    'r' => '𝔯',
    's' => '𝔰',
    't' => '𝔱',
    'u' => '𝔲',
    'v' => '𝔳',
    'w' => '𝔴',
    'x' => '𝔵',
    'y' => '𝔶',
    'z' => '𝔷',
};

/// The list of blackbold letters.
pub const BLACKBOLD_LETTERS: phf::Map<char, char> = phf_map! {
    'A' => '𝔸',
    'B' => '𝔹',
    'C' => 'ℂ',
    'D' => '𝔻',
    'E' => '𝔼',
    'F' => '𝔽',
    'G' => '𝔾',
    'H' => 'ℍ',
    'I' => '𝕀',
    'J' => '𝕁',
    'K' => '𝕂',
    'L' => '𝕃',
    'M' => '𝕄',
    'N' => 'ℕ',
    'O' => '𝕆',
    'P' => 'ℙ',
    'Q' => 'ℚ',
    'R' => 'ℝ',
    'S' => '𝕊',
    'T' => '𝕋',
    'U' => '𝕌',
    'V' => '𝕍',
    'W' => '𝕎',
    'X' => '𝕏',
    'Y' => '𝕐',
    'Z' => 'ℤ',
    'a' => '𝕒',
    'b' => '𝕓',
    'c' => '𝕔',
    'd' => '𝕕',
    'e' => '𝕖',
    'f' => '𝕗',
    'g' => '𝕘',
    'h' => '𝕙',
    'i' => '𝕚',
    'j' => '𝕛',
    'k' => '𝕜',
    'l' => '𝕝',
    'm' => '𝕞',
    'n' => '𝕟',
    'o' => '𝕠',
    'p' => '𝕡',
    'q' => '𝕢',
    'r' => '𝕣',
    's' => '𝕤',
    't' => '𝕥',
    'u' => '𝕦',
    'v' => '𝕧',
    'w' => '𝕨',
    'x' => '𝕩',
    'y' => '𝕪',
    'z' => '𝕫',
    '0' => '𝟘',
    '1' => '𝟙',
    '2' => '𝟚',
    '3' => '𝟛',
    '4' => '𝟜',
    '5' => '𝟝',
    '6' => '𝟞',
    '7' => '𝟟',
    '8' => '𝟠',
    '9' => '𝟡',
};

#[cfg(test)]
mod tests {
    use crate::utils::symbols::{get_category_by_name, Category};

    #[test]
    fn test_get_category_by_name() {
        assert_eq!(
            get_category_by_name(&"leTter".to_string()),
            Category::Letter
        );
        assert_eq!(
            get_category_by_name(&"coMparison".to_string()),
            Category::Comparison
        );
        assert_eq!(
            get_category_by_name(&"keyword".to_string()),
            Category::Keyword
        );
        assert_eq!(get_category_by_name(&"Set".to_string()), Category::Set);
        assert_eq!(
            get_category_by_name(&"bigletter".to_string()),
            Category::BigLetter
        );
        assert_eq!(
            get_category_by_name(&"Number".to_string()),
            Category::Number
        );
        assert_eq!(get_category_by_name(&"space".to_string()), Category::Space);
        assert_eq!(
            get_category_by_name(&"doesn't exists".to_string()),
            Category::Default
        );
    }
}
